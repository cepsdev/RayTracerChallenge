/*
MIT License

Copyright (c) 2023,2024 Tomas Prerovsky

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/


let skip_summary = 0;
let summary_only_failures = 0;

val p = undef;
val r = undef;
val r2 = undef;
val orig = undef;
val dir = undef;
val sp = undef;
val xs = undef;
val mat = undef;
val intensity = undef;
val position = undef;
val light = undef;
val eyev = undef;
val normalv = undef;
val result = undef;
val in_shadow = undef;
kind DocgenStringPrintNoEscape;
DocgenStringPrintNoEscape docinfo_se;

docinfo_se(

"
"

);
macro equality_test{
   symbolic_equality(as_nodeset(arglist.at(0)),as_nodeset(arglist.at(1))).diff.equal.content();
};


Scenario{
     title{label __chapter__5_phong_materials_scenario_1 title = "The default material";};
     Given{
         let mat = rt_obj(material{});
     };
     Then{
        equality_test{
            mat.content().color.content();
            rt_obj(color{1.0;1.0;1.0;});
        };
    };
    And{
        equality_test{
            mat.content().ambient;
            ambient{0.1;};
        };
    };
    And{
        equality_test{
            mat.content().diffuse;
            diffuse{0.9;};
        };
    };
    And{
        equality_test{
            mat.content().specular;
            specular{0.9;};
        };
    };
    And{
        equality_test{
            mat.content().shininess;
            shininess{200.0;};
        };
    };
};

macro Background{
 Given{let mat = rt_obj(material{});};
 And{let position = rt_obj(point{0.0;0.0;0.0;});};  
};


Scenario{
     title{label __chapter__6_XX title = "Lighting with the eye between the light and the surface";};
     Background{};
     Given{
         let eyev = rt_obj(vector{0.0;0.0;-1.0;});
     };
    And{
        let normalv = rt_obj(vector{0.0;0.0;-1.0;});
    };
    And{
        let light = rt_obj(point_light{position{rt_obj(point{0.0;0.0;-10.0;});};intensity{rt_obj(color{1.0;1.0;1.0;});};}); 
    };
    When{
        let result = rt_op(lighting{mat;light;position;eyev;normalv;});
    };
    Then{
        rt_op( 
            approx_equal{ 
                rt_obj(color{1.9;1.9;1.9;}); 
                result;
            });
    };
};


Scenario{
     title{label __chapter__6_XX title = "Lighting with the eye between light and surface, eye offset 45°";};
     Background{};
     Given{
         let eyev = rt_obj(vector{0.0;sqrt(2.0)/2.0;sqrt(2.0)/2.0;});
     };
    And{
        let normalv = rt_obj(vector{0.0;0.0;-1.0;});
    };
    And{
        let light = rt_obj(point_light{position{rt_obj(point{0.0;0.0;-10.0;});};intensity{rt_obj(color{1.0;1.0;1.0;});};}); 
    };
    When{
        let result = rt_op(lighting{mat;light;position;eyev;normalv;});
    };
    Then{
        rt_op( 
            approx_equal{ 
                rt_obj(color{1.0;1.0;1.0;}); 
                result;
            });
    };
};

Scenario{
     title{label __chapter__6_XX title = "Lighting with eye opposite surface, light offset 45°";};
     Background{};
     Given{
         let eyev = rt_obj(vector{0.0;0.0;-1.0;});
     };
    And{
        let normalv = rt_obj(vector{0.0;0.0;-1.0;});
    };
    And{
        let light = rt_obj(point_light{position{rt_obj(point{0.0;10.0;-10.0;});};intensity{rt_obj(color{1.0;1.0;1.0;});};}); 
    };
    When{
        let result = rt_op(lighting{mat;light;position;eyev;normalv;});
    };
    Then{
        rt_op( 
            approx_equal{ 
                rt_obj(color{0.7364;0.7364;0.7364;}); 
                result;
            });
    };
};
Scenario{
     title{label __chapter__6_XX title = "Lighting with eye in the path of the reflection vector";};
     Background{};
     Given{
         let eyev = rt_obj(vector{0.0;-sqrt(2.0)/2.0;-sqrt(2.0)/2.0;});
     };
    And{
        let normalv = rt_obj(vector{0.0;0.0;-1.0;});
    };
    And{
        let light = rt_obj(point_light{position{rt_obj(point{0.0;10.0;-10.0;});};intensity{rt_obj(color{1.0;1.0;1.0;});};}); 
    };
    When{
        let result = rt_op(lighting{mat;light;position;eyev;normalv;});
    };
    Then{
        rt_op( 
            approx_equal{ 
                rt_obj(color{1.6364;1.6364;1.6364;}); 
                result;
            });
    };
};


Scenario{
     title{label __chapter__6_XX title = "Lighting with the light behind the surface";};
     Background{};
     Given{
         let eyev = rt_obj(vector{0.0;0.0;-1.0;});
     };
    And{
        let normalv = rt_obj(vector{0.0;0.0;-1.0;});
    };
    And{
        let light = rt_obj(point_light{position{rt_obj(point{0.0;0.0;10.0;});};intensity{rt_obj(color{1.0;1.0;1.0;});};}); 
    };
    When{
        let result = rt_op(lighting{mat;light;position;eyev;normalv;});
    };
    Then{
        rt_op( 
            approx_equal{ 
                rt_obj(color{0.1;0.1;0.1;}); 
                result;
            });
    };
};

Scenario{
     title{label __chapter__8_scenario_1 title = "Lighting with the source in shadow";};
     Background{};
     Given{
         let eyev = rt_obj(vector{0.0;0.0;-1.0;});
     };
    And{
        let normalv = rt_obj(vector{0.0;0.0;-1.0;});
    };
    And{
        let light = rt_obj(
            point_light{
                position{
                    rt_obj(point{0.0;0.0;10.0;});
                };
                intensity{rt_obj(color{1.0;1.0;1.0;});};
            }
        ); 
    };
    And{
        let in_shadow = 1;
    };
    When{
        let result = rt_op(lighting{mat;light;position;eyev;normalv;in_shadow;});
    };
    Then{
        rt_op( 
            approx_equal{ 
                rt_obj(color{0.1;0.1;0.1;}); 
                result;
            });
    };
};













