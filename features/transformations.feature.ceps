let skip_summary = 0;
let summary_only_failures = 0;
val transform = undef;
val p = undef;
val inv = undef;
val v = undef;
val half_quarter=undef;
val full_quarter=undef;
val pi_approx = 3.14159265359;
val p2 = undef;
val p3 = undef;
val p4 = undef;
val A = undef;
val B = undef;
val C = undef;
val T = undef;



Scenario{
     title{label __chapter__4_scenario_1 title = "Multiplying by a translation matrix";};
     Given{
         let transform = rt_obj(translation{5.0;-3.0;2.0;});
     };
     And{let p = rt_obj(point{-3.0;4.0;5.0;});1;};     
     Then{
        rt_op(approx_equal{
            rt_obj(point{2.0;1.0;7.0;});
            rt_op(
                multiply{
                    transform;
                    p;
                }
            );
        });
    };
};

Scenario{
     title{label __chapter__4_scenario_2 title = "Multiplying by the inverse of a translation matrix";};
     Given{
         let transform = rt_obj(translation{5.0;-3.0;2.0;});
     };
     And{
        let inv = rt_op(inverse{transform;});1;
     };
     And{let p = rt_obj(point{-3.0;4.0;5.0;});1;};     
     Then{
        rt_op(approx_equal{
            rt_obj(point{-8.0;7.0;3.0;});
            rt_op(
                multiply{
                    inv;
                    p;
                }
            );
        });
    };
};

Scenario{
     title{label __chapter__4_scenario_3 title = "Translation does not affect vectors";};
     Given{
         let transform = rt_obj(translation{5.0;-3.0;2.0;});
     };
     And{let v = rt_obj(vector{-3.0;4.0;5.0;});1;};     
     Then{
        rt_op(approx_equal{
            v;
            rt_op(
                multiply{
                    transform;
                    v;
                }
            );
        });
    };
};

Scenario{
     title{label __chapter__4_scenario_4 title = "A scaling matrix applied to a point";};
     Given{
         let transform = rt_obj(scaling{2.0;3.0;4.0;});
     };
     And{let p = rt_obj(point{-4.0;6.0;8.0;});1;};     
     Then{
        rt_op(approx_equal{
            rt_obj(point{-8.0;18.0;32.0;});
            rt_op(
                multiply{
                    transform;
                    p;
                }
            );
        });
    };
};

Scenario{
     title{label __chapter__4_scenario_5 title = "A scaling matrix applied to a vector";};
     Given{
         let transform = rt_obj(scaling{2.0;3.0;4.0;});
     };
     And{let v = rt_obj(vector{-4.0;6.0;8.0;});1;};     
     Then{
        rt_op(approx_equal{
            rt_obj(vector{-8.0;18.0;32.0;});
            rt_op(
                multiply{
                    transform;
                    v;
                }
            );
        });
    };
};


Scenario{
     title{label __chapter__4_scenario_6 title = "Multiplying by the inverse of a scaling matrix";};
     Given{
         let transform = rt_obj(scaling{2.0;3.0;4.0;});
     };
     And{let inv = rt_op(inverse{transform;});1;};
     And{let v = rt_obj(vector{-4.0;6.0;8.0;});1;};     
     Then{
        rt_op(approx_equal{
            rt_obj(vector{-2.0;2.0;2.0;});
            rt_op(
                multiply{
                    inv;
                    v;
                }
            );
        });
    };
};

Scenario{
     title{label __chapter__4_scenario_7 title = "Reflection is scaling by a negative value";};
     Given{
         let transform = rt_obj(scaling{-1.0;1.0;1.0;});
     };
     And{let p = rt_obj(point{2.0;3.0;4.0;});1;};     
     Then{
        rt_op(approx_equal{
            rt_obj(point{-2.0;3.0;4.0;});
            rt_op(
                multiply{
                    transform;
                    p;
                }
            );
        });
    };
};

Scenario{
     title{label __chapter__4_scenario_8 title = "Rotating a point around the x axis";};
     Given{
         let p = rt_obj(point{0.0;1.0;0.0;});
     };
     And{let half_quarter = rt_obj(rotation_x{pi_approx / 4.0;});1;};     
     And{let full_quarter = rt_obj(rotation_x{pi_approx / 2.0;});1;};
     Then{
        rt_op(approx_equal{
            rt_obj(point{0.0;1.0 / sqrt(2.0);1.0 / sqrt(2.0);});
            rt_op(
                multiply{
                    half_quarter;
                    p;
                }
            );
        });
    };
    And{
        rt_op(approx_equal{
            rt_obj(point{0.0;0.0;1.0;});
            rt_op(
                multiply{
                    full_quarter;
                    p;
                }
            );
        });
    };

};

Scenario{
     title{label __chapter__4_scenario_9 title = "The inverse of an x-rotation rotates in the opposite direction";};
     Given{
         let p = rt_obj(point{0.0;1.0;0.0;});
     };
     And{let half_quarter = rt_obj(rotation_x{pi_approx / 4.0;});1;};     
     And{let inv = rt_op(inverse{half_quarter;});1;};
     Then{
        rt_op(approx_equal{
            rt_obj(point{0.0;1.0 / sqrt(2.0);-1.0 / sqrt(2.0);});
            rt_op(
                multiply{
                    inv;
                    p;
                }
            );
        });
    };
};

Scenario{
     title{label __chapter__4_scenario_10 title = "Rotating a point around the y axis";};
     Given{
         let p = rt_obj(point{0.0;0.0;1.0;});
     };
     And{let half_quarter = rt_obj(rotation_y{pi_approx / 4.0;});1;};     
     And{let full_quarter = rt_obj(rotation_y{pi_approx / 2.0;});1;};
     Then{
        rt_op(approx_equal{
            rt_obj(point{1.0 / sqrt(2.0);0.0;1.0 / sqrt(2.0);});
            rt_op(
                multiply{
                    half_quarter;
                    p;
                }
            );
        });
    };
    And{
        rt_op(approx_equal{
            rt_obj(point{1.0;0.0;0.0;});
            rt_op(
                multiply{
                    full_quarter;
                    p;
                }
            );
        });
    };
};

Scenario{
     title{label __chapter__4_scenario_10 title = "Rotating a point around the z axis";};
     Given{
         let p = rt_obj(point{0.0;1.0;0.0;});
     };
     And{let half_quarter = rt_obj(rotation_z{pi_approx / 4.0;});1;};     
     And{let full_quarter = rt_obj(rotation_z{pi_approx / 2.0;});1;};
     Then{
        rt_op(approx_equal{
            rt_obj(point{- 1.0 / sqrt(2.0);1.0 / sqrt(2.0);0.0;});
            rt_op(
                multiply{
                    half_quarter;
                    p;
                }
            );
        });
    };
    And{
        rt_op(approx_equal{
            rt_obj(point{-1.0;0.0;0.0;});
            rt_op(
                multiply{
                    full_quarter;
                    p;
                }
            );
        });
    };
};


kind DocgenStringPrintNoEscape;
DocgenStringPrintNoEscape docinfo_se;

docinfo_se(

"
In three dimensions each component may be affected by either of the other two
components, so there are a total of six parameters that may be used to define
the shear transformation.
- x in proportion to y
- x in proportion to z
- y in proportion to x
- y in proportion to z
- z in proportion to x
- z in proportion to y.
"

);

Scenario{
     title{label __chapter__4_scenario_11 title = "A shearing transformation moves x in proportion to y";};
       Given{
         let transform = rt_obj(shearing{1.0;0.0;0.0;0.0;0.0;0.0;});
       };
       And{
        let p = rt_obj(point{2.0;3.0;4.0;});1;
       };
       Then{
        rt_op(approx_equal{
            rt_obj(point{5.0;3.0;4.0;});
            rt_op(
                multiply{
                    transform;
                    p;
                }
            );
        });
    };
};

Scenario{
     title{label __chapter__4_scenario_12 title = "A shearing transformation moves x in proportion to z";};
       Given{
         let transform = rt_obj(shearing{0.0;1.0;0.0;0.0;0.0;0.0;});
       };
       And{
        let p = rt_obj(point{2.0;3.0;4.0;});1;
       };
       Then{
        rt_op(approx_equal{
            rt_obj(point{6.0;3.0;4.0;});
            rt_op(
                multiply{
                    transform;
                    p;
                }
            );
        });
    };
};


Scenario{
     title{label __chapter__4_scenario_13 title = "A shearing transformation moves y in proportion to x";};
       Given{
         let transform = rt_obj(shearing{0.0;0.0;1.0;0.0;0.0;0.0;});
       };
       And{
        let p = rt_obj(point{2.0;3.0;4.0;});1;
       };
       Then{
        rt_op(approx_equal{
            rt_obj(point{2.0;5.0;4.0;});
            rt_op(
                multiply{
                    transform;
                    p;
                }
            );
        });
    };
};

Scenario{
     title{label __chapter__4_scenario_14 title = "A shearing transformation moves y in proportion to z";};
       Given{
         let transform = rt_obj(shearing{0.0;0.0;0.0;1.0;0.0;0.0;});
       };
       And{
        let p = rt_obj(point{2.0;3.0;4.0;});1;
       };
       Then{
        rt_op(approx_equal{
            rt_obj(point{2.0;7.0;4.0;});
            rt_op(
                multiply{
                    transform;
                    p;
                }
            );
        });
    };
};

Scenario{
     title{label __chapter__4_scenario_15 title = "A shearing transformation moves z in proportion to x";};
       Given{
         let transform = rt_obj(shearing{0.0;0.0;0.0;0.0;1.0;0.0;});
       };
       And{
        let p = rt_obj(point{2.0;3.0;4.0;});1;
       };
       Then{
        rt_op(approx_equal{
            rt_obj(point{2.0;3.0;6.0;});
            rt_op(
                multiply{
                    transform;
                    p;
                }
            );
        });
    };
};

Scenario{
     title{label __chapter__4_scenario_16 title = "A shearing transformation moves z in proportion to y";};
       Given{
         let transform = rt_obj(shearing{0.0;0.0;0.0;0.0;0.0;1.0;});
       };
       And{
        let p = rt_obj(point{2.0;3.0;4.0;});1;
       };
       Then{
        rt_op(approx_equal{
            rt_obj(point{2.0;3.0;7.0;});
            rt_op(
                multiply{
                    transform;
                    p;
                }
            );
        });
    };
};

Scenario{
     title{label __chapter__4_scenario_17 title = "Individual transformations are applied in sequence";};
       Given{
         let p = rt_obj(point{1.0;0.0;1.0;});
       };
       And{
        let A = rt_obj(rotation_x{pi_approx / 2.0;});1;
       };
       And{
        let B = rt_obj(scaling{5.0;5.0;5.0;});1;
       };
       And{
        let C = rt_obj(translation{10.0;5.0;7.0;});1;
       };
       When{let p2 = rt_op(multiply{A;p;}); };
       Then{
        rt_op(approx_equal{
            rt_obj(point{1.0;-1.0;0.0;});
            p2;
        });
       };
       When{let p3 = rt_op(multiply{B;p2;}); };
       Then{
        rt_op(approx_equal{
            rt_obj(point{5.0;-5.0;0.0;});
            p3;
        });
       };
       When{let p4 = rt_op(multiply{C;p3;}); };
       Then{
        rt_op(approx_equal{
            rt_obj(point{15.0;0.0;7.0;});
            p4;
        });
       };

};


Scenario{
     title{label __chapter__4_scenario_18 title = "Chained transformations must be applied in reverse order";};
       Given{
         let p = rt_obj(point{1.0;0.0;1.0;});
       };
       And{
        let A = rt_obj(rotation_x{pi_approx / 2.0;});1;
       };
       And{
        let B = rt_obj(scaling{5.0;5.0;5.0;});1;
       };
       And{
        let C = rt_obj(translation{10.0;5.0;7.0;});1;
       };
       When{let T = rt_op(multiply{C;rt_op(multiply{B;A;});}); };
       Then{
        rt_op(approx_equal{
            rt_obj(point{15.0;0.0;7.0;});
            rt_op(multiply{T;p;});
        });
       };
};
