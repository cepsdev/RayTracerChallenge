/*
MIT License

Copyright (c) 2023,2024 Tomas Prerovsky

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/



Scenario{
     title{label __chapter__2_scenario_6 title = "Creating a canvas";};
     Given{
         let c = rt_obj(canvas{10; 20;});
     };
     Then{
        if(c.canvas.size()){
            c.canvas.width.content() == 10;
        } else 0;
     };
     And{
        c.canvas.height.content() == 20;
     };
     And{
        val every_pixel_is_black = 1;
        for(coll : c.canvas.data.color){
            if(coll.red.content() != 0.0){ let every_pixel_is_black = 0;}
            if(coll.green.content() != 0.0){ let every_pixel_is_black = 0;}
            if(coll.blue.content() != 0.0){ let every_pixel_is_black = 0;}
        }
        every_pixel_is_black;
     };
};

Scenario{
     title{label __chapter__2_scenario_6 title = "Creating a canvas";};
     Given{
         let c = rt_obj(canvas{3; 4;});
     };
     And{
        let red_color = rt_obj(color{1.0;0.0;0.0;});1;
     };
     When{
        let canvas = rt_op(write_pixel{c;2;3;red_color;});
     };
     Then{
        let col = rt_op(pixel_at{canvas;2;3;});
        col.color.red.content() == red_color.color.red.content() &&
        col.color.green.content() == red_color.color.green.content() &&
        col.color.blue.content() == red_color.color.blue.content()        ;
        
     };
};

Scenario{
     title{label __chapter__2_scenario_7 title = "Constructing the PPM header";};
     Given{
         let c = rt_obj(canvas{5; 3;});
     };
     When{
        let ppm = rt_op(canvas_to_ppm{c;});
     };
     Then
     {
         first_lines_of_string(ppm,3,"\n") == "P3\n5 3\n255\n";
     };
};

Scenario{
     title{label __chapter__2_scenario_8 title = "Constructing the PPM pixel data";};
     Given{
         let c = rt_obj(canvas{5; 3;});
     };
     And{
      let c1 = rt_obj(color{1.5;0.0;0.0;});1;
     };
     And{
      let c2 = rt_obj(color{0.0;0.5;0.0;});1;
     };
     And{
      let c3 = rt_obj(color{-0.5;0.0;1.0;});1;
     };
     When
     {
        let c = rt_op(write_pixel{c; 0;0;c1;});
     };
     And {
        let c = rt_op(write_pixel{c; 2;1;c2;});1;
     };
     And {
        let c = rt_op(write_pixel{c; 4;2;c3;});1;
     };
     And{
         let ppm = rt_op(canvas_to_ppm{c;});1;
     };
     Then
     {
         lines_of_string(ppm,3,3,"\n") == 
         "255 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 128 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 255\n";
     };
};

Scenario{
     title{label __chapter__2_scenario_9 title = "Splitting long lines in PPM files";};
     Given{
         let canvas_rows = 2;
         let canvas_cols = 10;

         let c = rt_obj(canvas{canvas_cols; canvas_rows;});
     };
     When{
        for(canvas_row : 0 .. canvas_rows - 1){
         for(canvas_col : 0 .. canvas_cols - 1){
            let c = rt_op(write_pixel{c;canvas_col;canvas_row;color{1.0;0.8;0.6;};});
         }
        }
     };
     And{
         let ppm = rt_op(canvas_to_ppm{c;});1;
     };
     Then
     {
         lines_of_string(ppm,3,4,"\n") == 
         "255 204 153 255 204 153 255 204 153 255 204 153 255 204 153 255 204\n153 255 204 153 255 204 153 255 204 153 255 204 153\n255 204 153 255 204 153 255 204 153 255 204 153 255 204 153 255 204\n153 255 204 153 255 204 153 255 204 153 255 204 153\n";
     };
};

Scenario{
     title{label __chapter__2_scenario_10 title = "PPM files are terminated by a newline character";};
     Given{
         let canvas_rows = 3;
         let canvas_cols = 5;
         let c = rt_obj(canvas{canvas_cols; canvas_rows;});
     };
     When{
      let ppm = rt_op(canvas_to_ppm{c;});;
     };
     Then{
      string_ends_with(ppm,"\n");
     };
};


Scenario{
     title{label __chapter__2_scenario_ex_1 title = "Wrtite PPM file to file system.";};
     Given{
         let canvas_rows = 30;
         let canvas_cols = 40;
         let c = rt_obj(canvas{canvas_cols; canvas_rows;});
     };
     When{
      let ppm = rt_op(canvas_to_ppm{c;});;
     };
     Then{
      rt_op(write_file{ppm;"test_data/test.ppm";});
     };
};

let skip_summary = 0;
let summary_only_failures = 0;

