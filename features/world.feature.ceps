/*
MIT License

Copyright (c) 2023,2024 Tomas Prerovsky

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/



let skip_summary = 0;
let summary_only_failures = 0;

val p = undef;
val r = undef;
val orig = undef;
val dir = undef;
val sp = undef;
val xs = undef;
val trans = undef; 
val normal = undef;
val mat = undef;
val w = undef;
val a_light = undef;
val s1 = undef;
val s2 = undef;
val shape = undef;
val i = undef;
val comps = undef;
val outer = undef;
val inner = undef;


Scenario{
     title{label __chapter__7_world_1 title = "Creating a world";};
     Given{
         let w = rt_obj(world{});
     };
     Then{
        w.world.objects.size() && w.world.objects.content().size() == 0;
     };
     And{
         w.world.lights.size() && w.world.lights.content().size() == 0;
     };
};

Scenario{
     title{label __chapter__7_world_2 title = "The default world";};
     Given{
         let a_light = rt_obj(point_light{position{rt_obj(point{-10.0;10.0;-10.0;});};intensity{rt_obj(color{1.0;1.0;1.0;});}; });
     };
     And{
         let s1 = rt_obj(sphere{
                           rt_obj(material{
                              rt_obj(color{0.8;1.0;0.6;});
                              diffuse{0.7;};
                              specular{0.2;};
                           });
                         }
                        );
     };
     And{
         let s2 = rt_obj(
            sphere{
               transform{
                  rt_obj(scaling{0.5;0.5;0.5;});
               };
            }
         );
     };
     When{
         let w = rt_op(default_world{});
     };
     Then{
        equality_test{
         w.world.lights.point_light;
         a_light;
        };
     };
     And{
        equality_test{
            datum{
                w.world.objects.content().at(0).sphere.material.color;
                w.world.objects.content().at(0).sphere.material.diffuse;
                w.world.objects.content().at(0).sphere.material.specular;
                w.world.objects.content().at(1).sphere.transform.matrix;
            };
            datum{
                color{color{   red{0.8;   };  green{1.0;   };  blue{0.6;   };   };  };
                diffuse{0.7;};
                specular{0.2;};
                matrix{ 
                    dim{4;4;}; 
                    data{
                        0.5; 0.0; 0.0; 0.0; 
                        0.0; 0.5; 0.0; 0.0;
                        0.0; 0.0; 0.5; 0.0;
                        0.0; 0.0; 0.0; 1.0;
                    }; 
                };
            };
        };
    };
};

Scenario{
     title{label __chapter__7_world_3 title = "Intersect a world with a ray (pp. 92,93)";};
     Given{
        let w = rt_op(default_world{});
     };
     And{
        let r = rt_obj(ray{rt_obj(point{0.0;0.0;-5.0;});rt_obj(vector{0.0;0.0;1.0;});});
     };
     When{
        let xs = rt_op(intersect_world{w;r;});
     };
     Then{
         xs.intersections.intersection.t.content().size() == 4;
     };
     And{
        xs.intersections.intersection.t.content().at(0) == 4.0;
     };
     And{
        xs.intersections.intersection.t.content().at(1) == 4.5;     
     };
     And{
        xs.intersections.intersection.t.content().at(2) == 5.5;     
     };
     And{
        xs.intersections.intersection.t.content().at(3) == 6.0;
     };
};


Scenario{
     title{label __chapter__7_world_4 title = "Shading an intersection";};
     Given{
        let w = rt_op(default_world{});
     };
     And{
        let r = rt_obj(ray{rt_obj(point{0.0;0.0;-5.0;});rt_obj(vector{0.0;0.0;1.0;});});
     };
     And{
        let shape = w.world.objects.content().at(0);
     };
     And{
      let i = rt_obj(intersection{4.0; shape;});
     };
     When{
      let comps = rt_op(prepare_computations{i; r;});
     };
     And{
      let c = rt_op(shade_hit{w;comps;});
     };
     Then{
           rt_op(approx_equal{c.color.red.content().at(0);0.38066;})
           && rt_op(approx_equal{c.color.green.content().at(0);0.47583;})
           && rt_op(approx_equal{c.color.blue.content().at(0);0.2855;});
     };
};

Scenario{
     title{label __chapter__7_world_5 title = "Shading an intersection from the inside";};
     Given{
        let w = rt_op(default_world{});
     };
     And{
       let w = identity(
               world{
                  w.world.objects;
                  lights{ 
                     point_light{position{rt_obj(point{0.0;0.25;0.0;});}; intensity{color{red{1.0;}; green{1.0;}; blue{1.0;}; };};};
                  };
               });
     };
     And{
        let r = rt_obj(ray{rt_obj(point{0.0;0.0;0.0;});rt_obj(vector{0.0;0.0;1.0;});});
     };
     And{
        let shape = w.world.objects.content().at(1);
     };
     And{
      let i = rt_obj(intersection{0.5; shape;});
     };
     When{
      let comps = rt_op(prepare_computations{i; r;});
     };
     And{
      let c = rt_op(shade_hit{w;comps;});
     };
     Then{
           rt_op(approx_equal{c.color.red.content().at(0);0.90498;})
           && rt_op(approx_equal{c.color.green.content().at(0);0.90498;})
           && rt_op(approx_equal{c.color.blue.content().at(0);0.90498;});
     };
};


Scenario{
   title{label __chapter__7_world_6 title = "The color when a ray misses.";};
   Given{
     let w = rt_op(default_world{}); 
   };
   And{
      let r = rt_obj(ray{rt_obj(point{0.0;0.0;-5.0;});rt_obj(vector{0.0;1.0;0.0;});});
   };
   When{
      let c = rt_op(color_at{w;r;});
   };
   Then{
           rt_op(approx_equal{c.color.red.content().at(0);0.0;})
           && rt_op(approx_equal{c.color.green.content().at(0);0.0;})
           && rt_op(approx_equal{c.color.blue.content().at(0);0.0;});
   };
};

Scenario{
   title{label __chapter__7_world_7 title = "The color when a ray hits.";};
   Given{
     let w = rt_op(default_world{}); 
   };
   And{
      let r = rt_obj(ray{rt_obj(point{0.0;0.0;-5.0;});rt_obj(vector{0.0;0.0;1.0;});});
   };
   When{
      let c = rt_op(color_at{w;r;});
   };
   Then{
           rt_op(approx_equal{c.color.red.content().at(0);0.38066;})
           && rt_op(approx_equal{c.color.green.content().at(0);0.47583;})
           && rt_op(approx_equal{c.color.blue.content().at(0);0.2855;});
   };
};

Scenario{
   title{label __chapter__7_world_8 title = "The color with an intersection behind the ray.";};
   Given{
     let w = rt_op(default_world{}); 
   };
   And{
      let outer = w.world.objects.content().at(0);
   };
   And{
      let outer = identity(
         sphere{
            outer.sphere.transform;
            material{
               outer.sphere.material.color;
               ambient{1.0;};
               outer.sphere.material.diffuse;
               outer.sphere.material.specular;
               outer.sphere.material.shininess;
            };
         }
      );
   };
   And{
      let inner = w.world.objects.content().at(1);
   };
   And{
      let inner = identity(
         sphere{
            inner.sphere.transform;
            material{
               inner.sphere.material.color;
               ambient{1.0;};
               inner.sphere.material.diffuse;
               inner.sphere.material.specular;
               inner.sphere.material.shininess;
            };
         }
      );
   };
   And{
      let r = rt_obj(ray{rt_obj(point{0.0;0.0;0.75;});rt_obj(vector{0.0;0.0;-1.0;});});
   };
   When{
      let c = rt_op(color_at{identity(
         world{
            objects{
               outer;
               inner;
            };
            w.world.lights;
         }
      );r;});
   };
   Then{
           rt_op(approx_equal{c.color.red.content().at(0);inner.sphere.material.color.color.red.content();})
           && rt_op(approx_equal{c.color.green.content().at(0);inner.sphere.material.color.color.green.content();})
           && rt_op(approx_equal{c.color.blue.content().at(0);inner.sphere.material.color.color.blue.content();});
   };
};

Scenario{
   title{label __chapter__8_scenario_2 title = "There is no shadow when nothing is collinear with point and light.";};
   Given{
     let w = rt_op(default_world{}); 
   };
   And{
      let p = rt_obj(point{0.0;10.0;0.0;});
   };
   Then{
           !rt_op(is_shadowed{w;p;});
   };
};

Scenario{
   title{label __chapter__8_scenario_3 title = "The shadow when an object is between the point and the light";};
   Given{
     let w = rt_op(default_world{}); 
   };
   And{
      let p = rt_obj(point{10.0;-10.0;10.0;});
   };
   Then{
           rt_op(is_shadowed{w;p;});
   };
};

Scenario{
   title{label __chapter__8_scenario_4 title = "There is no shadow when an object is behind the light";};
   Given{
     let w = rt_op(default_world{}); 
   };
   And{
      let p = rt_obj(point{-20.0;20.0;-20.0;});
   };
   Then{
      !rt_op(is_shadowed{w;p;});
   };
};

Scenario{
   title{label __chapter__8_scenario_5 title = "There is no shadow when an object is behind the point";};
   Given{
     let w = rt_op(default_world{}); 
   };
   And{
      let p = rt_obj(point{-2.0;2.0;-2.0;});
   };
   Then{
           !rt_op(is_shadowed{w;p;});
   };
};

Scenario{
   title{label __chapter__8_world_6 title = "shaded_hit() is given an intersection in shadow.";};
   Given{
         let w = identity(
         world{
            objects{
               rt_obj(sphere{});
               sphere{
                  transform{  rt_obj(translation{0.0;0.0;10.0;}); };
                  material{   color{    color{     red{1.0;};     
                     green{1.0;     };
                     blue{1.0;     };   
                  };    
                  };   
                  ambient{0.1;   };   
                  diffuse{0.9;   };  
                  specular{0.9;   };   
                  shininess{200.0;   };   
                };  
               };//sphere
            };//objects
            lights{
                point_light{
                  position{rt_obj(point{0.0;0.0;-10.0;});}; 
                  intensity{color{red{1.0;}; green{1.0;}; blue{1.0;}; };};};
            };
         });
   };
   And{
      let r = rt_obj(ray{rt_obj(point{0.0;0.0;5.0;});rt_obj(vector{0.0;0.0;1.0;});});
   };

   And{
      let i = rt_obj(intersection{4.0; w.world.objects.content().at(1); });
   };

   When{
      let comps = rt_op(prepare_computations{i;r;});
   };
   And{
      let c = rt_op(shade_hit{w;comps;});
   };
   Then{
      rt_op(approx_equal{c.color.red.content().at(0);0.1;})
      && rt_op(approx_equal{c.color.green.content().at(0);0.1;})
      && rt_op(approx_equal{c.color.blue.content().at(0);0.1;});
   };
};

