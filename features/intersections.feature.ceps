/*
MIT License

Copyright (c) 2023,2024 Tomas Prerovsky

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

let skip_summary = 0;
let summary_only_failures = 0;

val p = undef;
val r = undef;
val orig = undef;
val dir = undef;
val sp = undef;
val xs = undef;
val i = undef;
val i1 = undef;
val i2 = undef;
val i3 = undef;
val i4 = undef;
val shape = undef;
val comps = undef;

kind DocgenStringPrintNoEscape;
DocgenStringPrintNoEscape docinfo_se;

docinfo_se(

"
"

);

macro equality_test{
   symbolic_equality(as_nodeset(arglist.at(0)),as_nodeset(arglist.at(1))).diff.equal.content();
};


Scenario{
     title{label __chapter__5_scenario_tracking_intersections_1 title = "An intersection encapsulates t and object";};
     Given{
         let sp = rt_obj(sphere{});
     };
     When{let i = rt_obj(intersection{3.5;sp;});};
     Then{
        i.intersection.t.content() == 3.5;
     };
     And{
        equality_test{i.intersection.object.content(); rt_obj(sphere{}); };
     };
};

kind SymEqMatcherAny;
SymEqMatcherAny ANY;
Scenario{
     title{label __chapter__5_scenario_tracking_intersections_2 title = "Aggregating intersections";};
     Given{
         let sp = rt_obj(sphere{});
     };
     
     And{let i1 = rt_obj(intersection{1.0;sp;});};
     
     And{let i2 = rt_obj(intersection{2.0;sp;});};
     
     When{let xs = rt_obj(intersections{i1;i2;});};
     Then{
        xs.content().size() == 2;
     };
     
     And{
       equality_test{
         xs.intersections.intersection.at(0);
         intersection{
             t{1.0;};
             object{sphere{ANY;};};
         };
       };
     };
     And{
       equality_test{
         xs.intersections.intersection.at(1);
         intersection{
             t{2.0;};
             object{sphere{ANY;};};
         };
       };
     };
};



Scenario{
     title{label __chapter__5_scenario_tracking_intersections_3 title = "Intersect sets the object on the intersection";};
     Given{
         let r = rt_obj(
            ray{
               rt_obj(point{0.0;0.0;-5.0;});
               rt_obj(vector{0.0;0.0;1.0;});
            }
         );
     };
     And{let sp = rt_obj(sphere{});};
     When{let xs = rt_op(intersect{sp;r;});};
     Then{
        xs.intersections.intersection.size() == 2;
     };
     And{
       equality_test{
         xs.intersections.intersection.at(0).content().object;
        object{sphere{ANY;};};
       };
     };
     And{
       equality_test{
         xs.intersections.intersection.at(1).content().object;
        object{sphere{ANY;};};
       };
     };
};

Scenario{
     title{label __chapter__5_scenario_tracking_intersections_4 title = "The hit, when all intersections have positive t";};
     Given{
         let sp = rt_obj(sphere{});
     };
     And{let i1 = rt_obj(intersection{1.0;sp;});};
     And{let i2 = rt_obj(intersection{2.0;sp;});};
     And{let xs = rt_obj(intersections{i2;i1;});};
     When{
        let i = rt_op(hit{xs;});
     };
     Then{
        equality_test{i; i1; };
     };
};

Scenario{
     title{label __chapter__5_scenario_tracking_intersections_5 title = "The hit, when some intersections have negative t";};
     Given{
         let sp = rt_obj(sphere{});
     };
     And{let i1 = rt_obj(intersection{-1.0;sp;});};
     And{let i2 = rt_obj(intersection{1.0;sp;});};
     And{let xs = rt_obj(intersections{i2;i1;});};
     When{
        let i = rt_op(hit{xs;});
     };
     Then{
        equality_test{i; i2; };
     };
};

Scenario{
     title{label __chapter__5_scenario_tracking_intersections_6 title = "The hit, when all intersections have negative t";};
     Given{
         let sp = rt_obj(sphere{});
     };
     And{let i1 = rt_obj(intersection{-2.0;sp;});};
     And{let i2 = rt_obj(intersection{-1.0;sp;});};
     And{let xs = rt_obj(intersections{i2;i1;});};
     When{
        let i = rt_op(hit{xs;});
     };
     Then{
        equality_test{i; undef; };
     };
};

Scenario{
     title{label __chapter__5_scenario_tracking_intersections_7 title = "The hit is always the lowest nonnegative intersection";};
     Given{
         let sp = rt_obj(sphere{});
     };
     And{let i1 = rt_obj(intersection{5.0;sp;});};
     And{let i2 = rt_obj(intersection{7.0;sp;});};
     And{let i3 = rt_obj(intersection{-3.0;sp;});};
     And{let i4 = rt_obj(intersection{2.0;sp;});};

     And{let xs = rt_obj(intersections{i1;i2;i3;i4;});};
     When{
        let i = rt_op(hit{xs;});
     };
     Then{
        equality_test{i; i4; };
     };
};

Scenario{
     title{label __chapter__7_p_93 title = "Precomputing the state of an intersection";};
     Given{
         let r = rt_obj(ray{rt_obj(point{0.0;0.0;-5.0;});rt_obj(vector{0.0;0.0;1.0;});});
     };
     And{
         let shape = rt_obj(sphere{});
     };
     And{
         let i = rt_obj(intersection{4.0;shape;});
     };
     When{
         let comps = rt_op(prepare_computations{i;r;});
     };
     Then{
      equality_test{
         datum{
            comps.prepare_computations.object;
            comps.prepare_computations.point.tuple;
            comps.prepare_computations.eyev.tuple;
            comps.prepare_computations.normal_v.tuple;

         };
         datum{
            i.intersection.object;
            rt_obj(point{0.0;0.0;-1.0;});
            rt_obj(vector{0.0;0.0;-1.0;});
            rt_obj(vector{0.0;0.0;-1.0;});
         };
      };
     };
};


Scenario{
   title{label __chapter__7_p_94 title = "The hit, when an intersection occurs on the outside";};
   Given{
      let r = rt_obj(ray{rt_obj(point{0.0;0.0;-5.0;}); rt_obj(vector{0.0;0.0;1.0;});});
   };
   And{
      let shape = rt_obj(sphere{});
   };
   And{
      let i = rt_obj(intersection{4.0; shape; });
   };
   When{
      let comps = rt_op(prepare_computations{i;r;});
   };
   Then{
      equality_test{
         comps.prepare_computations.inside;
         inside{0;};
      };
   };
};

Scenario{
   title{label __chapter__7_p_95 title = "The hit, when an intersection occurs on the inside";};
   Given{
      let r = rt_obj(ray{rt_obj(point{0.0;0.0;0.0;}); rt_obj(vector{0.0;0.0;1.0;});});
   };
   And{
      let shape = rt_obj(sphere{});
   };
   And{
      let i = rt_obj(intersection{1.0; shape; });
   };
   When{
      let comps = rt_op(prepare_computations{i;r;});
   };
   Then{
      equality_test{
         datum{
            comps.prepare_computations.normal_v.tuple;
            comps.prepare_computations.point.tuple;
            comps.prepare_computations.eyev.tuple;
            comps.prepare_computations.inside;
         };
         datum{
            rt_obj(vector{-1.0*0.0;-1.0*0.0;-1.0;});
            rt_obj(point{0.0;0.0;1.0;});
            rt_obj(vector{0.0;0.0;-1.0;});
            inside{1;};
         };
      };
   };
};