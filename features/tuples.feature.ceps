kind DocgenStringPrintNoEscape;
DocgenStringPrintNoEscape docinfo_se;
val a = "";
val b = a;

Scenario{
     title{label __chapter__1_scenario_1 title = "A tuple with w=1.0 is a point";};
     Given{
         let a = as_nodeset(tuple{4.3; -4.2; 3.1; 1.0;});
     };
     let b = rt_obj(a.tuple);
     Then{b.tuple.x.content() == 4.3;};
     And{b.tuple.y.content() == -4.2;};
     And{b.tuple.z.content() ==  3.1;};
     And{b.tuple.w.content() == 1.0;};
     And{rt_obj_type_as_str(b) == "point";};
     And{rt_obj_type_as_str(b) != "vector";};
};

Scenario{
     title{label __chapter__1_scenario_2 title = "A tuple with w=0 is a vector";};
     Given{
         let a = as_nodeset(tuple{4.3; -4.2; 3.1; 0.0;});
     };
     let b = rt_obj(a.tuple);
     Then{b.tuple.x.content() == 4.3;};
     And{b.tuple.y.content() == -4.2;};
     And{b.tuple.z.content() ==  3.1;};
     And{b.tuple.w.content() == 0.0;};
     And{rt_obj_type_as_str(b) != "point";};
     And{rt_obj_type_as_str(b) == "vector";};
};

Scenario{
     title{label __chapter__1_scenario_3 title = "point() creates a tuple with w=1";};
     Given{
         let a = as_nodeset(point{4.0; -4.0; 3.0;});
     };
     let b = rt_obj(a.point);
     val c = {tuple{x{4.0;};y{-4.0;};z{3.0;};w{1.0;};};};
     
     Then{symbolic_equality(c,b.tuple).diff.equal.content();};
};

Scenario{
     title{label __chapter__1_scenario_4 title = "vector() creates a tuple with w=0";};
     Given{
         let a = as_nodeset(vector{4.0; -4.0; 3.0;});
     };
     let b = rt_obj(a.vector);
     val c = {tuple{x{4.0;};y{-4.0;};z{3.0;};w{0.0;};};};
     
     Then{symbolic_equality(c,b.tuple).diff.equal.content();};
};

summary{
for(e : root.Scenario){
    scenario{
    e.title.content();
    val pass = 1;
    if(e.Then.size()){
        val r = force_int(e.Then.content()) == 1; 
        if (!r) {let pass=0;}
        for(ee : e.And){
            val r = force_int(ee.content()) == 1; 
            if (!r) {let pass=0;}
        }
    }
    verdict{
    if(pass){
        label Passed title = "" type="check";
    } else {
         label Failed title = "" type="error";
    }
    };
    };
}
};