kind DocgenStringPrintNoEscape;
DocgenStringPrintNoEscape docinfo_se;
val a = "";
val b = a;
val v = b;
val v1 = b;
val v2 = b;

Scenario{
     title{label __chapter__1_scenario_1 title = "A tuple with w=1.0 is a point";};
     Given{
         let a = as_nodeset(tuple{4.3; -4.2; 3.1; 1.0;});
     };
     let b = rt_obj(a.tuple);
     Then{b.tuple.x.content() == 4.3;};
     And{b.tuple.y.content() == -4.2;};
     And{b.tuple.z.content() ==  3.1;};
     And{b.tuple.w.content() == 1.0;};
     And{rt_obj_type_as_str(b) == "point";};
     And{rt_obj_type_as_str(b) != "vector";};
};

Scenario{
     title{label __chapter__1_scenario_2 title = "A tuple with w=0 is a vector";};
     Given{
         let a = as_nodeset(tuple{4.3; -4.2; 3.1; 0.0;});
     };
     let b = rt_obj(a.tuple);
     Then{b.tuple.x.content() == 4.3;};
     And{b.tuple.y.content() == -4.2;};
     And{b.tuple.z.content() ==  3.1;};
     And{b.tuple.w.content() == 0.0;};
     And{rt_obj_type_as_str(b) != "point";};
     And{rt_obj_type_as_str(b) == "vector";};
};

Scenario{
     title{label __chapter__1_scenario_3 title = "point() creates a tuple with w=1";};
     Given{
         let a = as_nodeset(point{4.0; -4.0; 3.0;});
     };
     let b = rt_obj(a.point);
     val c = {tuple{x{4.0;};y{-4.0;};z{3.0;};w{1.0;};};};
     
     Then{symbolic_equality(c,b.tuple).diff.equal.content();};
};

Scenario{
     title{label __chapter__1_scenario_4 title = "vector() creates a tuple with w=0";};
     Given{
         let a = as_nodeset(vector{4.0; -4.0; 3.0;});
     };
     let b = rt_obj(a.vector);
     val c = {tuple{x{4.0;};y{-4.0;};z{3.0;};w{0.0;};};};
     
     Then{symbolic_equality(c,b.tuple).diff.equal.content();};
};

Scenario{
     title{label __chapter__1_scenario_5 title = "Adding two tuples";};
     Given{
         let a = as_nodeset(tuple{3.0; -2.0; 5.0;1.0;});
     };
     let b = as_nodeset(tuple{-2.0; 3.0; 1.0;0.0;});
     val c = {tuple{x{1.0;};y{1.0;};z{6.0;};w{1.0;};};};
     Then{ symbolic_equality(rt_op(plus{a;b;}).tuple,c).diff.equal.content();};
};

Scenario{
     title{label __chapter__1_scenario_6 title = "Subtracting two points";};
     Given{
         let a = as_nodeset(point{3.0; 2.0; 1.0;});
     };
     let b = as_nodeset(point{5.0; 6.0; 7.0;});
     val c = rt_obj( vector{x{-2.0;};y{-4.0;};z{-6.0;};}  );
     Then{ symbolic_equality(rt_op(minus{a;b;}).tuple,c.tuple).diff.equal.content();};
};

Scenario{
     title{label __chapter__1_scenario_7 title = "Subtracting two vectors";};
     Given{
         let a = as_nodeset(vector{3.0; 2.0; 1.0;});
     };
     let b = as_nodeset(vector{5.0; 6.0; 7.0;});
     val c = rt_obj( vector{x{-2.0;};y{-4.0;};z{-6.0;};}  );
     Then{ symbolic_equality(rt_op(minus{a;b;}).tuple,c.tuple).diff.equal.content();};
};

Scenario{
     title{label __chapter__1_scenario_8 title = "Subtracting a vector from the zero vector";};
     val zero = ""; 
     Given{
         let zero = as_nodeset(vector{0.0; 0.0; 0.0;});
     };
     let v = as_nodeset(vector{1.0; -2.0; 3.0;});
     val result = rt_obj( vector{x{-1.0;};y{2.0;};z{-3.0;};}  );
     Then{ symbolic_equality(rt_op(minus{zero;v;}).tuple,result.tuple).diff.equal.content();};
};

Scenario{
     title{label __chapter__1_scenario_9 title = "Negating a tuple";};
     Given{
         let a = as_nodeset(tuple{1.0; -2.0; 3.0; -4.0;});
     };
     val result = rt_obj( tuple{x{-1.0;};y{2.0;};z{-3.0;};w{4.0;};}  );
     Then{ symbolic_equality(rt_op(negate{a;}).tuple,result.tuple).diff.equal.content();};
};

Scenario{
     title{label __chapter__1_scenario_10 title = "Multiplying a tuple by a scalar";};
     Given{
         let a = rt_obj(tuple{1.0; -2.0; 3.0; -4.0;});
     };
     val result = rt_obj( tuple{x{3.5;};y{-7.0;};z{10.5;};w{-14.0;};}  );
     Then{ symbolic_equality(rt_op(multiply{3.5;a;}).tuple,result.tuple).diff.equal.content();};
};
Scenario{
     title{label __chapter__1_scenario_11 title = "Multiplying a tuple by a fraction";};
     Given{
         let a = rt_obj(tuple{1.0; -2.0; 3.0; -4.0;});
     };
     val result = rt_obj( tuple{x{0.5;};y{-1.0;};z{1.5;};w{-2.0;};}  );
     Then{ symbolic_equality(rt_op(multiply{0.5;a;}).tuple,result.tuple).diff.equal.content();};
};
Scenario{
     title{label __chapter__1_scenario_12 title = "Dividing a tuple by scalar";};
     Given{
         let a = rt_obj(tuple{1.0; -2.0; 3.0; -4.0;});
     };
     val result = rt_obj( tuple{x{0.5;};y{-1.0;};z{1.5;};w{-2.0;};}  );
     Then{ symbolic_equality(rt_op(divide{a;2.0;}).tuple,result.tuple).diff.equal.content();};
};

Scenario{
     title{label __chapter__1_scenario_13 title = "Computing the magnitude of vector(1,0,0)";};
     Given{
         let v = rt_obj(vector{1.0; 0.0; 0.0;});
     };
     Then{ rt_op(magnitude{v;}) == 1.0;};
};

Scenario{
     title{label __chapter__1_scenario_14 title = "Computing the magnitude of vector(0,1,0)";};
     Given{
         let v = rt_obj(vector{0.0; 1.0; 0.0;});
     };
     Then{ rt_op(magnitude{v;}) == 1.0;};
};

Scenario{
     title{label __chapter__1_scenario_15 title = "Computing the magnitude of vector(0,0,1)";};
     Given{
         let v = rt_obj(vector{0.0; 0.0; 1.0;});
     };
     Then{ rt_op(magnitude{v;}) == 1.0;};
};

Scenario{
     title{label __chapter__1_scenario_15 title = "Computing the magnitude of vector(1,2,3)";};
     Given{
         let v = rt_obj(vector{1.0; 2.0; 3.0;});
     };
     Then{ rt_op(magnitude{v;}) == sqrt(14.0);};
};

Scenario{
     title{label __chapter__1_scenario_15 title = "Computing the magnitude of vector(-1,-2,-3)";};
     Given{
         let v = rt_obj(vector{-1.0; -2.0; -3.0;});
     };
     Then{ rt_op(magnitude{v;}) == sqrt(14.0);};
};

Info{
    label __chapter__1_magnitude title="";
    magnitude(w) = sqrt(w_x*w_x + w_y*w_y + w_z*w_z);
};

Scenario{
     title{label __chapter__1_scenario_16 title = "Normalizing vector(4,0,0) gives (1,0,0)";};
     Given{
         let v = rt_obj(vector{4.0; 0.0; 0.0;});
     };
     val result = rt_obj( vector{1.0;0.0;0.0;}  );
     Then{ symbolic_equality(rt_op(normalize{v;}).tuple,result.tuple).diff.equal.content();};
};

Scenario{
     title{label __chapter__1_scenario_17 title = "Normalizing vector(1,2,3)";};
     Given{
         let v = rt_obj(vector{1.0; 2.0; 3.0;});
     };
     val result = rt_obj( vector{0.26726;0.53452;0.80178;}  );
     Then{ rt_op(approx_equal{v;result;});};
};

Scenario{
     title{label __chapter__1_scenario_18 title = "The magnitude of a normalized vector";};
     Given{
         let v = rt_obj(vector{1.0; 2.0; 3.0;});
     };
     Then{ rt_op(approx_equal{1.0;rt_op(magnitude{rt_op(normalize{v;}); });}) ; };
};


Info{
    label __chapter__1_normalize title="";
    macro normalize{
        kind Vector;
        Vector v;
        tuple{
            x{ v.x / magnitude(v);};
            y{ v.y / magnitude(v);};
            z{ v.z / magnitude(v);};
        };
    };
};

Scenario{
     title{label __chapter__1_scenario_19 title = "The dot product of two tuples";};
     Given{
         let a = rt_obj(vector{1.0; 2.0; 3.0;});
     };
     And{
        let b = rt_obj(vector{2.0; 3.0; 4.0;});b == b;
     };
     Then{ rt_op(approx_equal{20.0;rt_op(dot{a;b;});}) ; };
};

Info{
    label __chapter__1_dot_product title="";
    macro dot{
        kind Vector;
        Vector v1,v2;
        tuple{
            x{ v1.x * v2.x; };
            y{ v1.y * v2.y; };
            z{ v1.z * v2.z; };
        };
    };
};

Scenario{
     title{label __chapter__1_scenario_20 title = "The cross product of two vectors";};
     Given{
         let v1 = rt_obj(vector{1.0; 2.0; 3.0;});
     };
     And{
        let v2 = rt_obj(vector{2.0; 3.0; 4.0;}); 1;
     };
     val result1 = rt_obj(vector{-1.0;2.0;-1.0;});
     val result2 = rt_obj(vector{1.0;-2.0;1.0;});
     Then{ symbolic_equality(rt_op(cross{v1;v2;}).tuple,result1.tuple).diff.equal.content();};
     And{ symbolic_equality(rt_op(cross{v2;v1;}).tuple,result2.tuple).diff.equal.content();};

     ">>>>>";rt_op(cross{v1;v2;});
};

summary{
for(e : root.Scenario){
    scenario{
    e.title.content();
    val pass = 1;
    if(e.Then.size()){
        val r = force_int(e.Then.content()) == 1; 
        if (!r) {let pass=0;}
        for(ee : e.And){
            val r = force_int(ee.content()) == 1; 
            if (!r) {let pass=0;}
        }
    }
    verdict{
    if(pass){
        label Passed title = "" type="check";
    } else {
         label Failed title = "" type="error";
    }
    };
    };
}
};

